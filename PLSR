# Preprocessing and wrangling of Gross Domestic Product (GDP) dataset 
IMF_GDP_dataset <- read.csv ("/Users/Desktop/Applied Project/Data/GDP IMF Dataset.csv")

# Preprocessing and wrangling of Global Findex dataset
fin_x_dataset <- read.csv ("/Users/Desktop/Applied Project/Data/Findex Dataset.csv")
install.packages(c('dplyr', 'readxl'))
library(readxl)
names(fin_x_dataset)[1] <- 'Country'
names(fin_x_dataset)[2] <- 'Code'
names(fin_x_dataset)[4] <- 'Year'
names(fin_x_dataset)[6] <- 'Income.Level'

#Extracting rows with South east asian countries and Fintech related columns of Findex data
fin_x_dataset_SEA <- fin_x_dataset[fin_x_dataset$Country %in% c('Myanmar','Indonesia','Lao PDR', 'Philippines','Singapore','Vietnam', 'Malaysia','Thailand', 'Cambodia'),]
colnames(fin_x_dataset_SEA)
fin_x_dataset_SEA <- fin_x_dataset_SEA[c(1,2,4,6,12:29,58:68,71,72,78,79,91:101,104:106,110,111,118:121,131:134,144:147,159:162,168,169,172,173,179,180,183,184,190:193,222,223,230:243,257,258,263:266,333:368,381:392,417:440,501:512,609:704,1221:1232)]
ncol(fin_x_dataset_SEA)
colnames(fin_x_dataset_SEA)
nrow(fin_x_dataset_SEA)

#Extracting rows with South east asian countries and GDP related columns of IMF GDP data
IMF_GDP_dataset_SEA <- IMF_GDP_dataset[IMF_GDP_dataset$Country %in% c('Myanmar','Indonesia','Lao PDR', 'Philippines','Singapore','Vietnam', 'Malaysia','Thailand', 'Cambodia'),]
IMF_GDP_dataset_SEA<- IMF_GDP_dataset_SEA[c(50:52)]
IMF_GDP_dataset_SEA
colnames(IMF_GDP_dataset_SEA)
nrow(IMF_GDP_dataset_SEA)

#Changing varible type
typeof(IMF_GDP_dataset_SEA$Country)
typeof(fin_x_dataset_SEA$Country)
typeof(IMF_GDP_dataset_SEA$Year)
typeof(fin_x_dataset_SEA$Year)
typeof(IMF_GDP_dataset_SEA$GDP)
IMF_GDP_dataset_SEA$GDP <- as.integer(IMF_GDP_dataset_SEA$GDP)
IMF_GDP_dataset_SEA$GDP
fin_x_dataset_SEA$Income.Level <- as.factor(fin_x_dataset_SEA$Income.Level)
head(fin_x_dataset_SEA)
ncol(fin_x_dataset_SEA)
nrow(fin_x_dataset_SEA)
colnames(fin_x_dataset_SEA)

#Merging the two data sets
dataset_merged <- merge(fin_x_dataset_SEA, IMF_GDP_dataset_SEA, by = c('Year','Country'))
copy_merged_dataset <- dataset_merged
dataset_merged
ncol(dataset_merged)
nrow(dataset_merged)
colnames(dataset_merged)
row.names(dataset_merged)
dataset_merged$Year

#Handling Missing data
sum(is.na(dataset_merged))
colSums(is.na(dataset_merged))
drop <- c("Used.a.mobile.phone.or.the.internet.to.send.money..urban....age.15..","Used.a.mobile.phone.or.the.internet.to.access.an.account..in.labor.force....age.15..","Used.a.mobile.phone.or.the.internet.to.access.an.account..out.of.labor.force....age.15..","Mobile.money.account..rural....age.15..","Reason.for.not.having.a.mobile.money.account..don.t.have.enough.money.to.use.a.mobile.money.account....without.an.account..age.15..", "Received.payments.for.agricultural.products..to.a.card....age.15..", "Received.a.public.sector.pension..through.a.mobile.phone....of.public.sector.pension.recipients..age.15..", "Received.a.public.sector.pension..through.a.mobile.phone....age.15..","Received.a.public.sector.pension..to.a.card....of.public.sector.pension.recipients..age.15..", "Received.a.public.sector.pension..to.a.card....age.15..", "Reason.for.not.having.a.mobile.money.account..don.t.have.enough.money.to.use.a.mobile.money.account....without.an.account..age.15..","Reason.for.not.having.a.mobile.money.account..mobile.money.agents.are.too.far.away....age.15..","Reason.for.not.having.a.mobile.money.account..mobile.money.agents.are.too.far.away....without.an.account..age.15..","Reason.for.not.having.a.mobile.money.account..available.mobile.money.products.are.too.expensive....age.15..", "Reason.for.not.having.a.mobile.money.account..available.mobile.money.products.are.too.expensive....without.an.account..age.15..","Reason.for.not.having.a.mobile.money.account..don.t.have.the.necessary.documentation....age.15..", "Reason.for.not.having.a.mobile.money.account..don.t.have.the.necessary.documentation....without.an.account..age.15..", "Reason.for.not.having.a.mobile.money.account..don.t.have.enough.money.to.use.a.mobile.money.account....age.15..",  "Reason.for.not.having.a.mobile.money.account..don.t.have.enough.money.to.use.a.mobile.money.account....without.an.account..age.15.","Reason.for.not.having.a.mobile.money.account..use.an.agent.or.someone.else.to.make.payments....age.15..",  "Reason.for.not.having.a.mobile.money.account..use.an.agent.or.someone.else.to.make.payments....without.an.account..age.15..","Reason.for.not.having.a.mobile.money.account..do.not.have.their.own.mobile.phone....age.15..", "Reason.for.not.having.a.mobile.money.account..do.not.have.their.own.mobile.phone....without.an.account..age.15..","Used.a.mobile.phone.or.the.internet.to.access.an.account..urban....age.15..","Used.a.mobile.phone.or.the.internet.to.access.an.account..rural....age.15..")
dataset_merged = dataset_merged[,!(names(dataset_merged) %in% drop)]
for(i in 1:ncol(dataset_merged)) {
  dataset_merged[ , i][is.na(dataset_merged[ , i])] <- mean(dataset_merged[ , i], na.rm = TRUE)
}
head(dataset_merged)
sum(is.na(dataset_merged))
colSums(is.na(dataset_merged))
ncol(dataset_merged)
colnames(dataset_merged)
rownames(dataset_merged)

#Feature Encoding For The Income Level Column
str(dataset_merged$Income.Level)
sapply(dataset_merged,class)
income_model_matrix<-model.matrix(data = dataset_merged,GDP ~ Income.Level-1)
View(income_model_matrix)
nrow(dataset_merged)
colnames(dataset_merged)
dataset_merged1 <- cbind(dataset_merged[,1:3],income_model_matrix)
dataset_merged <-cbind(dataset_merged1,dataset_merged[5:273])
colnames(dataset_merged)
dataset_merged$GDP
ncol(dataset_merged)

# Examining multicollinearity using eigensystem analytics
cor_val<- eigen(cor(dataset_merged[,7:274]))$values
round(cor_val,5)
kappa(round(cor(dataset_merged[,22:38]),2))

# Normalizing the data)
str(dataset_merged)
dataset_normalised <-as.data.frame(apply(dataset_merged[7:275],2, normalize))
dataset_normalised <- cbind(dataset_merged[1:6],dataset_normalised)

#dataset_normalised <- cbind(dataset_normalised,dataset_merged[275])
dataset_normalised$GDP
colnames(dataset_normalised)
nrow(dataset_normalised)
sum(is.na(dataset_normalised))
colSums(is.na(dataset_normalised))

# Data Partitioning
install.packages("caTools")
library(caTools)
set.seed(290)
sample <- sample.split(dataset_normalised$GDP, SplitRatio = 0.7)
traind  <- subset(dataset_normalised, sample == TRUE)
testd   <- subset(dataset_normalised, sample == FALSE)

# Principal Componet Regression
set.seed(1234)
pcr_model <- pcr(GDP~., data=traind,scale=FALSE, validation='CV')
summary(pcr_model)
plot(pcr_model, "validation", val.type = "R2",
     main = "R squared for PCR Model",
     xlab ='No of components',
     ylab ='R^2')

validationplot(pcr_model,val.type = 'MSEP')
plot(pcr_model,'validation',val.type='MSEP',
     main='Error rates for the PCR Model')

# PCR Prediction For Train Data
install.packages("dplyr")
library(dplyr)
pcr.predict1 <- pcr_model %>% predict(traind,ncomp=12)
RMSE_pcr <- sqrt(mean((traind$GDP-pcr.predict1)^2))
mse_pcr <- mean((traind$GDP-pcr.predict1)^2)
r2_pcr <- 1-(sum((traind$GDP-pcr.predict1)^2)/sum((traind$GDP-mean(traind$GDP))^2))

cat( "MSE:", mse_pcr, "\n",
     "RMSE:", RMSE_pcr, "\n", "R-squared:", r2_pcr)            

# Pcr Prediction For Test Data
pcr_model1 <- pcr(GDP~., data=testd, scale=FALSE,validation='CV', segments= 9)
pcr.predict <- pcr_model1 %>% predict(testd,ncomp=2, segment=2)
summary(pcr.predict)
RMSE_pcr2 <- sqrt(mean((testd$GDP-pcr.predict)^2))
mse_pcr2 <- mean((testd$GDP-pcr.predict)^2)
mae_pcr2 <-mean(abs(testd$GDP-pcr.predict))
r2_pcr2 <- 1-(sum((testd$GDP-pcr.predict)^2)/sum((testd$GDP-mean(testd$GDP))^2))

cat( "MSE:", mse_pcr2, "\n",
     "RMSE:", RMSE_pcr2, "\n", "R-squared:", r2_pcr2)
